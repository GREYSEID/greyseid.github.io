<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://greyseid.github.io/</id>
    <title>正义大厅</title>
    <updated>2020-11-26T09:47:23.596Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://greyseid.github.io/"/>
    <link rel="self" href="https://greyseid.github.io/atom.xml"/>
    <subtitle>欢迎来到GREYSEID的自留地</subtitle>
    <logo>https://greyseid.github.io/images/avatar.png</logo>
    <icon>https://greyseid.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 正义大厅</rights>
    <entry>
        <title type="html"><![CDATA[正则表达式]]></title>
        <id>https://greyseid.github.io/post/zheng-ze-biao-da-shi/</id>
        <link href="https://greyseid.github.io/post/zheng-ze-biao-da-shi/">
        </link>
        <updated>2020-11-24T14:28:11.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E4%BB%8B%E7%BB%8D">介绍</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95">使用字符串方法</a></li>
<li><a href="#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6">正则表达式修饰符</a></li>
<li><a href="#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F">正则表达式模式</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8regexp%E5%AF%B9%E8%B1%A1">使用RegExp对象</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8test">使用test()</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8exec">使用exec()</a></li>
</ul>
</p>
<h1 id="介绍">介绍</h1>
<p>正则表达式是一个有字符序列形成的搜索模式<br>
当你在文本中搜索数据时，可以用搜索模式来描述你要查询的内容<br>
语法<br>
<code>/正则表达式主体/修饰符(可选)</code></p>
<h1 id="使用字符串方法">使用字符串方法</h1>
<p><code>search()</code>方法用于检索字符串中指定的子字符串，也可以用来检索与正则表达式相匹配的子字符串，并返回子字符串的起始位置<br>
<code>replace()</code>方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式相匹配的子串</p>
<pre><code class="language-javascript">var str=&quot;Visit Runoob!&quot;;
var n=str.search(/Runoob/i);
//6
var n=str.search(&quot;Runoob&quot;);//6

var str=&quot;请访问 Microsoft!&quot;;
var txt=str.replace(/microsoft/i,&quot;Runoob&quot;);
var txt=str.replace(&quot;Microsoft&quot;,&quot;Runoob&quot;);//请访问 Runoob!
</code></pre>
<h1 id="正则表达式修饰符">正则表达式修饰符</h1>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>i</td>
<td>执行对大小写不敏感的匹配</td>
</tr>
<tr>
<td>g</td>
<td>执行全局匹配，查找所有匹配而非在找到第一个匹配后停止</td>
</tr>
<tr>
<td>m</td>
<td>执行多行匹配</td>
</tr>
</tbody>
</table>
<h1 id="正则表达式模式">正则表达式模式</h1>
<p>方括号用于查找某个范围内的字符</p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>[abc]</td>
<td>查找方括号之间的任何字符</td>
</tr>
<tr>
<td>[0-9]</td>
<td>查找任何0至9的数字</td>
</tr>
<tr>
<td>(x|y)</td>
<td>查找任何以|分隔的选项</td>
</tr>
</tbody>
</table>
<p>元字符是拥有特殊含义的字符</p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>\d</td>
<td>查找数字</td>
</tr>
<tr>
<td>\s</td>
<td>查找空白字符</td>
</tr>
<tr>
<td>\b</td>
<td>匹配单词边界</td>
</tr>
<tr>
<td>\uxxxx</td>
<td>查找以十六进制数xxxx规定的Unicode字符</td>
</tr>
</tbody>
</table>
<p>量词</p>
<table>
<thead>
<tr>
<th>量词</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>n+</td>
<td>匹配任何包含至少一个n的字符串</td>
</tr>
<tr>
<td>n*</td>
<td>匹配任何包含0个或多个n的字符串</td>
</tr>
<tr>
<td>n?</td>
<td>匹配任何包含0个或一个n的字符串</td>
</tr>
</tbody>
</table>
<h1 id="使用regexp对象">使用RegExp对象</h1>
<p>在 JavaScript 中，RegExp 对象是一个预定义了属性和方法的正则表达式对象</p>
<h1 id="使用test">使用test()</h1>
<p><code>test()</code>方法是一个正则表达式方法，用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回true，否则返回false</p>
<pre><code class="language-javascript">/e/.test(&quot;The best things in my life is money&quot;);//true
</code></pre>
<h1 id="使用exec">使用exec()</h1>
<p><code>exec()</code>方法是一个正则表达式方法，用于检索字符串中的正则表达式的匹配，返回一个数组，其中存放匹配的结果，如果未找到匹配，则返回null</p>
<pre><code class="language-javascript">/e/.exec(&quot;The best things in my life is money&quot;);//e
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[对象的扩展]]></title>
        <id>https://greyseid.github.io/post/dui-xiang-de-kuo-zhan/</id>
        <link href="https://greyseid.github.io/post/dui-xiang-de-kuo-zhan/">
        </link>
        <updated>2020-11-24T09:03:36.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E5%B1%9E%E6%80%A7%E7%9A%84%E7%AE%80%E6%B4%81%E8%A1%A8%E7%A4%BA%E6%B3%95">属性的简洁表示法</a></li>
<li><a href="#%E5%B1%9E%E6%80%A7%E5%90%8D%E8%A1%A8%E8%BE%BE%E5%BC%8F">属性名表达式</a></li>
<li><a href="#%E6%96%B9%E6%B3%95%E7%9A%84name%E5%B1%9E%E6%80%A7">方法的name属性</a></li>
<li><a href="#%E5%B1%9E%E6%80%A7%E7%9A%84%E5%8F%AF%E6%9E%9A%E4%B8%BE%E6%80%A7%E5%92%8C%E9%81%8D%E5%8E%86">属性的可枚举性和遍历</a>
<ul>
<li><a href="#%E5%8F%AF%E6%9E%9A%E4%B8%BE%E6%80%A7">可枚举性</a></li>
<li><a href="#%E5%B1%9E%E6%80%A7%E7%9A%84%E9%81%8D%E5%8E%86">属性的遍历</a></li>
</ul>
</li>
<li><a href="#super%E5%85%B3%E9%94%AE%E5%AD%97">super关键字</a></li>
<li><a href="#%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6">对象的扩展运算符</a>
<ul>
<li><a href="#%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC">解构赋值</a></li>
<li><a href="#%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6">扩展运算符</a></li>
</ul>
</li>
<li><a href="#%E9%93%BE%E5%88%A4%E6%96%AD%E8%BF%90%E7%AE%97%E7%AC%A6">链判断运算符</a></li>
<li><a href="#null%E5%88%A4%E6%96%AD%E8%BF%90%E7%AE%97%E7%AC%A6">Null判断运算符</a></li>
<li><a href="#%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95">对象的新增方法</a>
<ul>
<li><a href="#objectis">Object.is()</a></li>
<li><a href="#objectassign">Object.assign()</a></li>
<li><a href="#objectgetownpropertydescriptors">Object.getOwnPropertyDescriptors()</a></li>
<li><a href="#__proto__%E5%B1%9E%E6%80%A7obiectsetprototypeofobjectgetprototypeof">__proto__属性，Obiect.setPrototypeOf()，Object.getPrototypeOf()</a>
<ul>
<li><a href="#__proto__%E5%B1%9E%E6%80%A7">__proto__属性</a></li>
<li><a href="#objectsetprototypeof">Object.setPrototypeOf()</a></li>
<li><a href="#objectgetprototypeof">Object.getPrototypeOf</a></li>
</ul>
</li>
<li><a href="#objectkeysobjectvaluesobjectentries">Object.keys()，Object.values()，Object.entries()</a>
<ul>
<li><a href="#objectkeys">Object.keys()</a></li>
<li><a href="#objectvalues">Object.values()</a></li>
<li><a href="#objectentries">Object.entries()</a></li>
</ul>
</li>
<li><a href="#objectfromentries">Object.fromEntries()</a></li>
</ul>
</li>
</ul>
</p>
<h1 id="属性的简洁表示法">属性的简洁表示法</h1>
<p><em>ES6</em>允许在大括号内直接写入变量和函数作为对象的属性和方法</p>
<pre><code class="language-javascript">const foo = 'bar';
const baz = {foo};
baz // {foo: &quot;bar&quot;}
// 等同于
const baz = {foo: foo};
</code></pre>
<p>上面代码中，变量foo直接写在大括号里面。这时，属性名就是变量名, 属性值就是变量值</p>
<pre><code class="language-javascript">function f(x, y) {
  return {x, y};
}
// 等同于
function f(x, y) {
  return {x: x, y: y};
}
f(1, 2) // Object {x: 1, y: 2}
</code></pre>
<p>方法简写</p>
<pre><code class="language-javascript">const o = {
  method() {
    return &quot;Hello!&quot;;
  }
};
// 等同于
const o = {
  method: function() {
    return &quot;Hello!&quot;;
  }
};
</code></pre>
<p>简写的对象方法不能用作构造函数，会报错。</p>
<pre><code class="language-javascript">const obj = {
  f() {
    this.foo = 'bar';
  }
};
new obj.f() // 报错
</code></pre>
<p>上面代码中，f是一个简写的对象方法，所以obj.f不能当作构造函数使用。</p>
<h1 id="属性名表达式">属性名表达式</h1>
<p><em>JavaScript</em>定义对象的属性</p>
<pre><code class="language-javascript">//方法一
obj.foo=true;
//方法二
obj['a'+'bc']=123;
</code></pre>
<p>上述代码中，方法一使用标识符作为属性名，方法二使用表达式作为属性名<br>
如果使用大括号定义属性名，在ES5中只能使用方法一，而在ES6中，可以用方法二，即把表达式放在方括号内</p>
<pre><code class="language-javascript">let propKey='foo';
let obj={
    [propKey]:true,
    ['a'+'bc']:123
};
obj['abc']//123

let lastWord = 'last word';
const a = {
  'first word': 'hello',
  [lastWord]: 'world'
};
a['first word'] // &quot;hello&quot;
a[lastWord] // &quot;world&quot;
a['last word'] // &quot;world&quot;

const obj={
  ['a'+'bc']:12,
  [hi],
}
//Uncaught SyntaxError: Unexpected token ','
//Uncaught ReferenceError: here is not defined
</code></pre>
<p>表达式还可以用于定义方法名</p>
<pre><code class="language-javascript">let obj = {
  ['h' + 'ello']() {
    return 'hi';
  }
};
obj.hello() // hi
</code></pre>
<p>属性名表达式与简洁表示法，不能同时使用，会报错</p>
<pre><code class="language-javascript">// 报错
const foo = 'bar';
const bar = 'abc';
const baz = { [foo] };
// 正确
const foo = 'bar';
const baz = { [foo]: 'abc'};
</code></pre>
<p>属性名表达式如果是一个对象，默认情况下会自动将对象转为字符串[object Object]，这一点要特别小心</p>
<pre><code class="language-javascript">const keyA = {a: 1};
const keyB = {b: 2};
const myObject = {
  [keyA]: 'valueA',
  [keyB]: 'valueB'
};
myObject // Object {[object Object]: &quot;valueB&quot;}
</code></pre>
<p>上面代码中，[keyA]和[keyB]得到的都是[object Object]，所以[keyB]会把[keyA]覆盖掉，而myObject最后只有一个[object Object]属性</p>
<h1 id="方法的name属性">方法的name属性</h1>
<p>函数的<code>name</code>属性，返回函数名，对象方法也是函数，所以也有<code>name</code>属性<br>
如果对象的方法使用了取值函数<code>getter</code>和存值函数<code>setter</code>，则<code>name</code>属性不会返回方法的名字，因为该属性不是在该方法上，而是在该方法的属性的描述对象的<code>get</code>和<code>set</code>属性上面，返回值是方法名前加上<code>get</code>和<code>set</code></p>
<pre><code class="language-javascript">const obj = {
  get foo() {},
  set foo(x) {}
};
obj.foo.name
// TypeError: Cannot read property 'name' of undefined
const descriptor = Object.getOwnPropertyDescriptor(obj, 'foo');
descriptor.get.name // &quot;get foo&quot;
descriptor.set.name // &quot;set foo&quot;
</code></pre>
<p>特殊情况：</p>
<ul>
<li><code>bind</code>方法创造的函数，<code>name</code>属性返回<code>bound</code>加上原函数的名字</li>
<li><code>Function</code>构造函数创造的函数，<code>name</code>属性返回<code>anonymous</code></li>
</ul>
<pre><code class="language-javascript">(new Function()).name // &quot;anonymous&quot;
var doSomething = function() {
  // ...
};
doSomething.bind().name // &quot;bound doSomething&quot;
</code></pre>
<p>如果对象的方法是一个Symbol值，那么<code>name</code>属性返回的是这个Symbol的描述</p>
<pre><code class="language-javascript">const key1 = Symbol('description');
const key2 = Symbol();
let obj = {
  [key1]() {},
  [key2]() {},
};
obj[key1].name // &quot;[description]&quot;
obj[key2].name // &quot;&quot;
</code></pre>
<h1 id="属性的可枚举性和遍历">属性的可枚举性和遍历</h1>
<h2 id="可枚举性">可枚举性</h2>
<p>对象的每个属性都有一个描述对象，用来控制该属性的行为<code>Object.getOwnPropertyDescriptor</code>方法可以获取该属性的描述对象</p>
<pre><code class="language-javascript">let obj = { foo: 123 };
Object.getOwnPropertyDescriptor(obj, 'foo')
//  {
//    value: 123,
//    writable: true,
//    enumerable: true,
//    configurable: true
//  }
</code></pre>
<p>描述对象的<code>enumerable</code>属性，称为“可枚举性”，如果该属性为<code>false</code>，就表示某些操作会忽略当前属性<br>
目有四个操作会忽略<code>enumerable</code>为<code>false</code>的属性</p>
<ul>
<li><code>for...in</code>循环：之遍历自身的和继承的可枚举的属性</li>
<li><code>Object.keys()</code>：返回对象自身的所有可枚举的属性的键名</li>
<li><code>JSON.stringify()</code>：只串行化对象自身可枚举的属性</li>
<li><code>Object.assign()</code>：忽略<code>enumerable</code>为<code>false</code>的属性，只拷贝对象自身的可枚举的属性</li>
</ul>
<p><code>for...in</code>会返回继承的属性，其他三个方法会忽略继承的属性，只处理对象自身的属性。引入<code>enumerable</code>就是为了规避<code>for...in</code>，不然所有内部属性和方法都会被遍历到<br>
所有Class的原型的方法都是不可枚举的</p>
<h2 id="属性的遍历">属性的遍历</h2>
<ol>
<li>for...in<br>
<code>for...in</code>循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）</li>
<li>Object.keys(obj)<br>
<code>Object.keys</code>返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名</li>
<li>Object.getOwnPropertyNames(obj)<br>
<code>Object.getOwnPropertyNames</code>返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名</li>
<li>Object.getOwnPropertySymbols(obj)<br>
<code>Object.getOwnPropertySymbols</code>返回一个数组，包含对象自身的所有 Symbol 属性的键名</li>
<li>Reflect.ownKeys(obj)<br>
<code>Reflect.ownKeys</code>返回一个数组，包含对象自身的（不含继承的）所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举</li>
</ol>
<p>以上的 5 种方法遍历对象的键名，都遵守同样的属性遍历的次序规则</p>
<ul>
<li>首先遍历所有数值键，按照数值升序排列</li>
<li>其次遍历所有字符串键，按照加入时间升序排列</li>
<li>最后遍历所有 Symbol 键，按照加入时间升序排列</li>
</ul>
<h1 id="super关键字">super关键字</h1>
<p><code>this</code>关键字总是指向函数所在的当前对象，指函数运行时所在的地方。<em>ES6</em>新增了一个<code>super</code>关键字，指向当前对象的原型对象</p>
<pre><code class="language-javascript">const proto = {
  foo: 'hello'
};
const obj = {
  foo: 'world',
  find() {
    return super.foo;
  }
};
Object.setPrototypeOf(obj, proto);
obj.find() // &quot;hello&quot;
</code></pre>
<p><code>super</code>关键字表示原型对象时，只能用在对象的方法之中，用在其他地方都会报错<br>
<code>super.foo</code>等同于<code>Object.getPrototypeOf(this).foo</code>（属性）或<code>Object.getPrototypeOf(this).foo.call(this)</code>（方法）</p>
<pre><code class="language-javascript">const proto = {
  x: 'hello',
  foo() {
    console.log(this.x);
  },
};
const obj = {
  x: 'world',
  foo() {
    super.foo();
  }
}
Object.setPrototypeOf(obj, proto);
obj.foo() // &quot;world&quot;
</code></pre>
<p><code>super.foo</code>指向原型对象<code>proto</code>的<code>foo</code>方法，但是绑定的<code>this</code>却还是当前对象<code>obj</code>，因此输出的就是<code>world</code></p>
<h1 id="对象的扩展运算符">对象的扩展运算符</h1>
<p><em>ES2018</em>将...引入了对象</p>
<h2 id="解构赋值">解构赋值</h2>
<p>对象的结构赋值用于对一个对象取值，用于将目标对象身上的所有可遍历的未被读取的对象赋值到指定对象上，所有的键值对都会拷贝到新对象上</p>
<pre><code class="language-javascript">let { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };
x // 1
y // 2
z // { a: 3, b: 4 }
</code></pre>
<p>结构赋值要求等号右边是一个对象，如果等号右边时<code>undefined</code>或<code>null</code>，就会报错，因为他们无法转换为对象<br>
解构赋值必须是最后一个参数，否则报错</p>
<pre><code class="language-javascript">let { ...x, y, z } = someObject; // 句法错误
let { x, ...y, ...z } = someObject; // 句法错误
</code></pre>
<p>解构赋值的复制是浅复制，如果一个键的值是一个复合类型的值（数组、对象、函数），那么解构赋值复制的是这个值的引用而不是副本。相当于复制了这个值的地址，修改这个值，复制之后的值，显示的化会显示修改后的值</p>
<pre><code class="language-javascript">let obj = { a: { b: 1 } };
let { ...x } = obj;
obj.a.b = 2;
x.a.b // 2
</code></pre>
<p>扩展运算符的解构赋值，不能复制继承自原型对象的属性</p>
<pre><code class="language-javascript">let o1 = { a: 1 };
let o2 = { b: 2 };
o2.__proto__ = o1;
let { ...o3 } = o2;
o3 // { b: 2 }
o3.a // undefined
</code></pre>
<p>对象<code>o3</code>复制了<code>o2</code>，但是只复制了<code>o2</code>自身的属性，没有复制它的原型对象<code>o1</code>的属性</p>
<pre><code class="language-javascript">const o = Object.create({ x: 1, y: 2 });
o.z = 3;
let { x, ...newObj } = o;
let { y, z } = newObj;
x // 1
y // undefined
z // 3
</code></pre>
<p>变量<code>x</code>是单纯的解构赋值，所以可以读取对象<code>o</code>继承的属性；变量<code>y</code>和<code>z</code>是扩展运算符的解构赋值，只能读取对象<code>o</code>自身的属性，所以变量<code>z</code>可以赋值成功，变量y取不到值。<em>ES6</em> 规定，变量声明语句之中，如果使用解构赋值，扩展运算符后面必须是一个变量名，而不能是一个解构赋值表达式，所以上面代码引入了中间变量<code>newObj</code>，如果写成下面这样会报错</p>
<pre><code class="language-javascript">let { x, ...{ y, z } } = o;
// SyntaxError: ... must be followed by an identifier in declaration contexts
</code></pre>
<p>解构赋值的一个用处，是扩展某个函数的参数，引入其他操作</p>
<pre><code class="language-javascript">function baseFunction({ a, b }) {
  // ...
}
function wrapperFunction({ x, y, ...restConfig }) {
  // 使用 x 和 y 参数进行操作
  // 其余参数传给原始函数
  return baseFunction(restConfig);
}
</code></pre>
<p>上面代码中，原始函数<code>baseFunction</code>接受<code>a</code>和<code>b</code>作为参数，函数<code>wrapperFunction</code>在<code>baseFunction</code>的基础上进行了扩展，能够接受多余的参数，并且保留原始函数的行为</p>
<h2 id="扩展运算符">扩展运算符</h2>
<p>对象的扩展运算符...用于取出参数对象的所有可遍历属性，拷贝到当前对象中</p>
<pre><code class="language-javascript">let z = { a: 3, b: 4 };
let n = { ...z };
n // { a: 3, b: 4 }
</code></pre>
<p>由于数组是特殊的对象，所以对象的扩展运算符可以使用数组</p>
<pre><code class="language-javascript">let foo = { ...['a', 'b', 'c'] };
foo
// {0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot;}
</code></pre>
<p>如果扩展运算符后面是一个空对象，则没有任何效果</p>
<pre><code class="language-javascript">{...{}, a: 1}
// { a: 1 }
</code></pre>
<p>如果扩展运算符后面不是对象，则自动转换为对象</p>
<pre><code class="language-javascript">// 等同于 {...Object(1)}
{...1} // {}
</code></pre>
<p>扩展运算符后面是整数1，会自动转为数值的包装对象Number{1}。由于该对象没有自身属性，所以返回一个空对象</p>
<pre><code class="language-javascript">// 等同于 {...Object(true)}
{...true} // {}
// 等同于 {...Object(undefined)}
{...undefined} // {}
// 等同于 {...Object(null)}
{...null} // {}
</code></pre>
<p>如果扩展运算符后面是字符串，它会自动转换成一个类似数组的对象，返回一个空对象。可能是由于数组有一个Iterator，所以能这么转换</p>
<pre><code class="language-javscript">{...'hello'}
// {0: &quot;h&quot;, 1: &quot;e&quot;, 2: &quot;l&quot;, 3: &quot;l&quot;, 4: &quot;o&quot;}
</code></pre>
<p>对象的扩展运算符等同于使用Object.assign()方法</p>
<pre><code class="language-javascript">let aClone = { ...a };
// 等同于
let aClone = Object.assign({}, a);
</code></pre>
<p>只是拷贝了对象实例的属性，如果想完整克隆一个对象，还拷贝对象原型的属性，可以采用下面的写法</p>
<pre><code class="language-javascript">// 写法一
const clone1 = {
  __proto__: Object.getPrototypeOf(obj),
  ...obj
};
// 写法二
const clone2 = Object.assign(
  Object.create(Object.getPrototypeOf(obj)),
  obj
);
// 写法三
const clone3 = Object.create(
  Object.getPrototypeOf(obj),
  Object.getOwnPropertyDescriptors(obj)
)
</code></pre>
<p>写法一的<code>__proto__</code>属性在非浏览器的环境不一定部署，因此推荐使用写法二和写法三<br>
扩展运算符可以用于合并两个对象</p>
<pre><code class="language-javscript">let ab = { ...a, ...b };
// 等同于
let ab = Object.assign({}, a, b);
</code></pre>
<p>如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。</p>
<pre><code class="language-javascript">let aWithOverrides = { ...a, x: 1, y: 2 };
// 等同于
let aWithOverrides = { ...a, ...{ x: 1, y: 2 } };
// 等同于
let x = 1, y = 2, aWithOverrides = { ...a, x, y };
// 等同于
let aWithOverrides = Object.assign({}, a, { x: 1, y: 2 });
</code></pre>
<pre><code class="language-javascript">let newVersion = {
  ...previousVersion,
  name: 'New Name' // Override the name property
};
</code></pre>
<p>上面代码中，newVersion对象自定义了name属性，其他属性全部复制自previousVersion对象<br>
如果把自定义属性放在扩展运算符前面，就变成了设置新对象的默认属性值。</p>
<pre><code class="language-javascript">let aWithDefaults = { x: 1, y: 2, ...a };
// 等同于
let aWithDefaults = Object.assign({}, { x: 1, y: 2 }, a);
// 等同于
let aWithDefaults = Object.assign({ x: 1, y: 2 }, a);
</code></pre>
<p>与数组的扩展运算符一样，对象的扩展运算符后面可以跟表达式。</p>
<pre><code class="language-javascript">const obj = {
  ...(x &gt; 1 ? {a: 1} : {}),
  b: 2,
};
</code></pre>
<p>扩展运算符的参数对象之中，如果有取值函数get，这个函数是会执行的。</p>
<pre><code class="language-javascript">let a = {
  get x() {
    throw new Error('not throw yet');
  }
}
let aWithXGetter = { ...a }; // 报错
</code></pre>
<p>上面例子中，取值函数get在扩展a对象时会自动执行，导致报错</p>
<h1 id="链判断运算符">链判断运算符</h1>
<p>如果读取对象内部的某个属性，往往需要判断一下该对象是否存在。比如，要读取<code>message.body.user.firstName</code>，安全的写法是写成下面这样</p>
<pre><code class="language-javascript">// 错误的写法
const  firstName = message.body.user.firstName;
// 正确的写法
const firstName = (message
  &amp;&amp; message.body
  &amp;&amp; message.body.user
  &amp;&amp; message.body.user.firstName) || 'default';
</code></pre>
<p><code>firstName</code>属性在对象的第四层，所以需要判断四次，每一层是否有值<br>
三元运算符<code>?:</code>也常用于判断对象是否存在</p>
<pre><code class="language-javascript">const fooInput = myForm.querySelector('input[name=foo]')
const fooValue = fooInput ? fooInput.value : undefined
</code></pre>
<p>上面例子中，必须先判断<code>fooInput</code>是否存在，才能读取<code>fooInput.value</code><br>
这样的层层判断非常麻烦，因此<em>ES2020</em>引入了“链判断运算符”（optional chaining operator）<code>?.</code>，简化上面的写法</p>
<pre><code class="language-javascript">const firstName = message?.body?.user?.firstName || 'default';
const fooValue = myForm.querySelector('input[name=foo]')?.value
</code></pre>
<p>下面是判断对象方法是否存在，如果存在就立即执行的例子</p>
<pre><code class="language-javascript">iterator.return?.()
</code></pre>
<p>上面代码中，<code>iterator.return</code>如果有定义，就会调用该方法，否则<code>iterator.return</code>直接返回<code>undefined</code>，不再执行<code>?.</code>后面的部分<br>
链判断运算符有三种用法</p>
<ul>
<li><code>obj?.prop</code> // 对象属性</li>
<li><code>obj?.[expr]</code>// 同上</li>
<li><code>func?.(...args)</code> // 函数或对象方法的调用</li>
</ul>
<p><code>let hex = &quot;#C0FFEE&quot;.match(/#([A-Z]+)/i)?.[1];</code>字符串的<code>match()</code>方法，如果没有发现匹配会返回<code>null</code>，如果发现匹配会返回一个数组，返回数组的第二个，<code>?.</code>运算符起到了判断作用<br>
使用这个运算符，有几个注意点</p>
<ol>
<li>短路机制<br>
<code>?.</code>运算符相当于一种短路机制，只要不满足条件，就不再往下执行。<pre><code class="language-javascript">a?.[++x]
// 等同于
a == null ? undefined : a[++x]
</code></pre>
上面代码中，如果<code>a</code>是<code>undefined</code>或<code>null</code>，那么<code>x</code>不会进行递增运算。也就是说，链判断运算符一旦为真，右侧的表达式就不再求值</li>
<li>delete运算符<pre><code class="language-javascript"> delete a?.b
 // 等同于
 a == null ? undefined : delete a.b
</code></pre>
上面代码中，如果a是undefined或null，会直接返回undefined，而不会进行delete运算</li>
<li>括号的影响<br>
如果属性链有圆括号，链判断运算符对圆括号外部没有影响，只对圆括号内部有影响<pre><code class="language-javascript">(a?.b).c
// 等价于
(a == null ? undefined : a.b).c
</code></pre>
上面代码中，?.对圆括号外部没有影响，不管a对象是否存在，圆括号后面的.c总是会执行</li>
<li>报错场合<br>
以下写法是禁止的，会报错。<pre><code class="language-javascript">// 构造函数
new a?.()
new a?.b()
// 链判断运算符的右侧有模板字符串
a?.`{b}`
a?.b`{c}`
// 链判断运算符的左侧是 super
super?.()
super?.foo
// 链运算符用于赋值运算符左侧
a?.b = c
</code></pre>
一般来说，使用?.运算符的场合，不应该使用圆括号</li>
<li>右侧不得为十进制数值<br>
为了保证兼容以前的代码，允许foo?.3:0被解析成foo ? .3 : 0，因此规定如果?.后面紧跟一个十进制数字，那么?.不再被看成是一个完整的运算符，而会按照三元运算符进行处理，也就是说，那个小数点会归属于后面的十进制数字，形成一个小数</li>
</ol>
<h1 id="null判断运算符">Null判断运算符</h1>
<p>读取对象属性的时候，如果某个属性的值是<code>null</code>或<code>undefined</code>，有时候需要为它们指定默认值。常见做法是通过<code>||</code>运算符指定默认值</p>
<pre><code class="language-javascript">const headerText = response.settings.headerText || 'Hello, world!';
const animationDuration = response.settings.animationDuration || 300;
const showSplashScreen = response.settings.showSplashScreen || true;
</code></pre>
<p>上面的三行代码都通过<code>||</code>运算符指定默认值，但是这样写是错的。开发者的原意是，只要属性的值为<code>null</code>或<code>undefined</code>，默认值就会生效，但是属性的值如果为空字符串或<code>false</code>或<code>0</code>，默认值也会生效<br>
为了避免这种情况，ES2020 引入了一个新的 Null 判断运算符<code>??</code>。它的行为类似<code>||</code>，但是只有运算符左侧的值为<code>null</code>或<code>undefined</code>时，才会返回右侧的值</p>
<pre><code class="language-javascript">const headerText = response.settings.headerText ?? 'Hello, world!';
const animationDuration = response.settings.animationDuration ?? 300;
const showSplashScreen = response.settings.showSplashScreen ?? true;
</code></pre>
<p>默认值只有在左侧属性值为null或undefined时，才会生效<br>
这个运算符的一个目的，就是跟链判断运算符<code>?.</code>配合使用，为<code>null</code>或<code>undefined</code>的值设置默认值<code>const animationDuration = response.settings?.animationDuration ?? 300;</code><br>
<code>??</code>有一个运算优先级问题，它与<code>&amp;&amp;</code>和<code>||</code>的优先级孰高孰低。现在的规则是，如果多个逻辑运算符一起使用，必须用括号表明优先级，否则会报错</p>
<h1 id="对象的新增方法">对象的新增方法</h1>
<h2 id="objectis">Object.is()</h2>
<p>ES5比较两个值是否相等只有<code>==</code>和<code>===</code>，它们都有缺点，前者会自动转换数据类型，后者的<code>NaN</code>不等于自身，以及<code>+0</code>等于<code>-0</code>。JavaScript 缺乏一种运算，在所有环境中，只要两个值是一样的，它们就应该相等<br>
<em>ES6</em>部署了这种方法，<code>Object.is()</code>用来比较两个值是否严格相等，与<code>===</code>的行为基本一致</p>
<pre><code class="language-javascript">Object.is('foo', 'foo')
// true
Object.is({}, {})
// false
</code></pre>
<p>不同之处只有两个：一是+0不等于-0，二是NaN等于自身</p>
<pre><code class="language-javascript">+0 === -0 //true
NaN === NaN // false
Object.is(+0, -0) // false
Object.is(NaN, NaN) // true
</code></pre>
<h2 id="objectassign">Object.assign()</h2>
<p><code>Object.assign()</code>方法用于对象的合并，将源对象的所有可枚举属性复制到目标对象</p>
<pre><code class="language-javascript">const target = { a: 1 };
const source1 = { b: 2 };
const source2 = { c: 3 };
Object.assign(target, source1, source2);
target // {a:1, b:2, c:3}
</code></pre>
<p>如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性<br>
如果只有一个参数，Object.assign()会直接返回该参数<br>
如果该参数不是对象，则会先转成对象，然后返回<br>
由于<code>undefined</code>和<code>null</code>无法转成对象，所以如果它们作为参数，就会报错<br>
如果非对象参数出现在源对象的位置（即非首参数），那么处理规则有所不同。首先，这些参数都会转成对象，如果无法转成对象，就会跳过。这意味着，如果<code>undefined</code>和<code>null</code>不在首参数，就不会报错<br>
其他类型的值（即数值、字符串和布尔值）不在首参数，也不会报错。但是，除了字符串会以数组形式，拷贝入目标对象，其他值都不会产生效果<br>
<code>Object.assign()</code>拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（<code>enumerable: false</code>）<br>
属性名为 Symbol 值的属性，也会被<code>Object.assign()</code>拷贝<br>
注意点</p>
<ol>
<li>浅拷贝<br>
<code>Object.assign()</code>方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用</li>
<li>同名属性的替换<br>
对于这种嵌套的对象，一旦遇到同名属性，<code>Object.assign()</code>的处理方法是替换，而不是添加</li>
</ol>
<pre><code class="language-javascript">const target = { a: { b: 'c', d: 'e' } }
const source = { a: { b: 'hello' } }
Object.assign(target, source)
// { a: { b: 'hello' } }
</code></pre>
<p>上面代码中，<code>target</code>对象的<code>a</code>属性被<code>source</code>对象的<code>a</code>属性整个替换掉了，而不会得到<code>{ a: { b: 'hello', d: 'e' } }</code>的结果。这通常不是开发者想要的，需要特别小心<br>
3. 数组的处理<br>
<code>Object.assign()</code>可以用来处理数组，但是会把数组视为对象<code>Object.assign([1, 2, 3], [4, 5])// [4, 5, 3]</code><br>
4. 取值函数的处理<br>
<code>Object.assign()</code>只能进行值的复制，如果要复制的值是一个取值函数，那么将求值后再复制</p>
<pre><code class="language-javascript">const source = {
  get foo() { return 1 }
};
const target = {};
Object.assign(target, source)
// { foo: 1 }
</code></pre>
<h2 id="objectgetownpropertydescriptors">Object.getOwnPropertyDescriptors()</h2>
<p>返回指定对象所有自身属性（非继承属性）的描述对象<br>
引入的目的是为了解决<code>Object.assign()</code>无法正确拷贝<code>get</code>和<code>set</code>属性的问题</p>
<pre><code class="language-javascript">const source = {
  set foo(value) {
    console.log(value);
  }
};
const target1 = {};
Object.assign(target1, source);
Object.getOwnPropertyDescriptor(target1, 'foo')
// { value: undefined,
//   writable: true,
//   enumerable: true,
//   configurable: true }
</code></pre>
<p><code>source</code>对象的<code>foo</code>属性的值是一个赋值函数，<code>Object.assign</code>方法将这个属性拷贝给<code>target1</code>对象，结果该属性的值变成了<code>undefined</code>。这是因为<code>Object.assign</code>方法总是拷贝一个属性的值，而不会拷贝它背后的赋值方法或取值方法<br>
<code>Object.getOwnPropertyDescriptors()</code>方法配合<code>Object.defineProperties()</code>方法，就可以实现正确拷贝<br>
<code>Object.getOwnPropertyDescriptors()</code>方法的另一个用处，是配合<code>Object.create()</code>方法，将对象属性克隆到一个新对象。这属于浅拷贝</p>
<pre><code class="language-javascript">const clone = Object.create(Object.getPrototypeOf(obj),
  Object.getOwnPropertyDescriptors(obj));
// 或者
const shallowClone = (obj) =&gt; Object.create(
  Object.getPrototypeOf(obj),
  Object.getOwnPropertyDescriptors(obj)
);
</code></pre>
<p><code>Object.getOwnPropertyDescriptors()</code>方法可以实现一个对象继承另一个对象</p>
<pre><code class="language-javascript">const obj = Object.create(
  prot,
  Object.getOwnPropertyDescriptors({
    foo: 123,
  })
);
</code></pre>
<h2 id="__proto__属性obiectsetprototypeofobjectgetprototypeof">__proto__属性，Obiect.setPrototypeOf()，Object.getPrototypeOf()</h2>
<h3 id="__proto__属性">__proto__属性</h3>
<p>用来读取或设置当前对象的原型对象</p>
<pre><code class="language-javascript">// es5 的写法
const obj = {
  method: function() { ... }
};
obj.__proto__ = someOtherObj;
// es6 的写法
var obj = Object.create(someOtherObj);
obj.method = function() { ... };
</code></pre>
<p>该属性不是一个标准，但是被浏览器广泛支持，所以可以部署这个属性，如果想要通用的话，最好使用<code>Object.setPrototypeOf()</code>（写操作）、<code>Object.getPrototypeOf()</code>（读操作）、<code>Object.create()</code>（生成操作）代替</p>
<h3 id="objectsetprototypeof">Object.setPrototypeOf()</h3>
<p>作用与<code>__proto__</code>相同，用来设置一个对象的原型对象，返回参数对象本身</p>
<pre><code class="language-javascript">// 格式
Object.setPrototypeOf(object, prototype)
// 用法
const o = Object.setPrototypeOf({}, null);
//等同于
function setPrototypeOf(obj, proto) {
  obj.__proto__ = proto;
  return obj;
}
</code></pre>
<p>如果第一个参数不是对象，会自动转为对象。但是由于返回的还是第一个参数，所以这个操作不会产生任何效果<br>
由于undefined和null无法转为对象，所以如果第一个参数是undefined或null，就会报错</p>
<h3 id="objectgetprototypeof">Object.getPrototypeOf</h3>
<p>读取一个对象的原型函数<code>Object.getPrototypeOf(obj);</code></p>
<pre><code class="language-javascript">function Rectangle() {
  // ...
}
const rec = new Rectangle();
Object.getPrototypeOf(rec) === Rectangle.prototype
// true
Object.setPrototypeOf(rec, Object.prototype);
Object.getPrototypeOf(rec) === Rectangle.prototype
// false
</code></pre>
<p>如果参数不是对象，会被自动转为对象<br>
如果参数不是对象，会被自动转为对象</p>
<h2 id="objectkeysobjectvaluesobjectentries">Object.keys()，Object.values()，Object.entries()</h2>
<h3 id="objectkeys">Object.keys()</h3>
<p>返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历属性的键名</p>
<pre><code class="language-javascript">var obj = { foo: 'bar', baz: 42 };
Object.keys(obj)
// [&quot;foo&quot;, &quot;baz&quot;]
</code></pre>
<p><em>ES2017</em>引入了跟<code>Object.keys</code>配套的<code>Object.values</code>和<code>Object.entries</code>，作为遍历一个对象的补充手段，供<code>for...of</code>循环使用</p>
<h3 id="objectvalues">Object.values()</h3>
<p>返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历属性的键值</p>
<pre><code class="language-javascript">const obj = { foo: 'bar', baz: 42 };
Object.values(obj)
// [&quot;bar&quot;, 42]
</code></pre>
<p>返回数组的成员顺序与对象属性的遍历介绍的排列顺序一致</p>
<pre><code class="language-javascript">const obj = Object.create({}, {p: {value: 42}});
Object.values(obj) // []
</code></pre>
<p><code>Object.create</code>方法的第二个参数添加的对象属性（属性<code>p</code>），如果不显式声明，默认是不可遍历的，因为<code>p</code>的属性描述对象的<code>enumerable</code>默认是<code>false</code>，<code>Object.values</code>不会返回这个属性。只要把<code>enumerable</code>改成<code>true</code>，<code>Object.values</code>就会返回属性<code>p</code>的值<br>
<code>Object.values</code>会过滤属性名为 <code>Symbol</code> 值的属性<br>
如果<code>Object.values</code>方法的参数是一个字符串，会返回各个字符组成的一个数组<br>
如果参数不是对象，Object.values会先将其转为对象。由于数值和布尔值的包装对象，都不会为实例添加非继承的属性。所以，Object.values会返回空数组</p>
<h3 id="objectentries">Object.entries()</h3>
<p>返回一个数组，成员是参数对象自身的（不含可继承的）所有可遍历属性的键值对数组<br>
除了返回值不一样，该方法的行为与<code>Object.values</code>基本一致</p>
<pre><code class="language-javascript">const obj = { foo: 'bar', baz: 42 };
Object.entries(obj)
// [ [&quot;foo&quot;, &quot;bar&quot;], [&quot;baz&quot;, 42] ]
</code></pre>
<p>如果原对象的属性名是一个<code>Symbol</code>值，该属性会被忽略，与<code>Object.values()</code>一致<br>
<code>Object.entries</code>只输出属性名非 <code>Symbol</code>值的属性。将来可能会有<code>Reflect.ownEntries()</code>方法，返回对象自身的所有属性<br>
<code>Object.entries</code>的基本用途是遍历对象的属性<br>
<code>Object.entries</code>方法的另一个用处是，将对象转为真正的<code>Map</code>结构</p>
<h2 id="objectfromentries">Object.fromEntries()</h2>
<p><code>Object.fromEntries()</code>方法是<code>Object.entries()</code>的逆操作，用于将一个键值对数组转为对象</p>
<pre><code class="language-javascript">Object.fromEntries([
  ['foo', 'bar'],
  ['baz', 42]
])
// { foo: &quot;bar&quot;, baz: 42 }
</code></pre>
<p>该方法的主要目的，是将键值对的数据结构还原为对象，因此特别适合将 Map 结构转为对象<br>
该方法的一个用处是配合<code>URLSearchParams</code>对象，将查询字符串转为对象</p>
<pre><code class="language-javascript">Object.fromEntries(new URLSearchParams('foo=bar&amp;baz=qux'))
// { foo: &quot;bar&quot;, baz: &quot;qux&quot; }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数组的扩展]]></title>
        <id>https://greyseid.github.io/post/shu-zu-de-kuo-zhan/</id>
        <link href="https://greyseid.github.io/post/shu-zu-de-kuo-zhan/">
        </link>
        <updated>2020-11-20T07:24:05.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6">扩展运算符</a>
<ul>
<li><a href="#%E5%90%AB%E4%B9%89">含义</a></li>
<li><a href="#%E6%9B%BF%E4%BB%A3%E6%95%B0%E7%BB%84%E7%9A%84apply%E6%96%B9%E6%B3%95">替代数组的apply方法</a></li>
<li><a href="#%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E5%BA%94%E7%94%A8">扩展运算符的应用</a>
<ul>
<li><a href="#%E5%90%88%E5%B9%B6%E6%95%B0%E7%BB%84">合并数组</a></li>
<li><a href="#%E4%B8%8E%E7%BB%93%E6%9E%84%E8%B5%8B%E5%80%BC%E7%BB%93%E5%90%88">与结构赋值结合</a></li>
<li><a href="#%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC">函数的返回值</a></li>
<li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2">字符串</a></li>
<li><a href="#%E5%AE%9E%E7%8E%B0iterator%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AF%B9%E8%B1%A1">实现Iterator接口的对象</a></li>
<li><a href="#map%E5%92%8Cset%E7%BB%93%E6%9E%84-generator%E5%87%BD%E6%95%B0">Map和Set结构、Generator函数</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#arrayfrom">Array.from()</a></li>
<li><a href="#arrayof">Array.of()</a></li>
<li><a href="#%E6%95%B0%E7%BB%84%E5%AE%9E%E4%BE%8B%E7%9A%84copywithin">数组实例的copyWithin()</a></li>
<li><a href="#%E6%95%B0%E7%BB%84%E5%AE%9E%E4%BE%8B%E7%9A%84find%E5%92%8Cfindindex">数组实例的find()和findIndex()</a></li>
<li><a href="#%E6%95%B0%E7%BB%84%E5%AE%9E%E5%8A%9B%E7%9A%84fill">数组实力的fill()</a></li>
<li><a href="#%E6%95%B0%E7%BB%84%E5%AE%9E%E4%BE%8B%E7%9A%84entries-keys%E5%92%8Cvalues">数组实例的entries()、keys()和values()</a></li>
<li><a href="#%E6%95%B0%E7%BB%84%E5%AE%9E%E4%BE%8B%E7%9A%84includes">数组实例的includes()</a></li>
<li><a href="#%E6%95%B0%E7%BB%84%E5%AE%9E%E4%BE%8B%E7%9A%84flastflatmap">数组实例的flast()，flatMap()</a></li>
<li><a href="#%E6%95%B0%E7%BB%84%E7%9A%84%E7%A9%BA%E4%BD%8D">数组的空位</a></li>
<li><a href="#arrayprototypesort%E7%9A%84%E6%8E%92%E5%BA%8F%E7%A8%B3%E5%AE%9A%E6%80%A7">Array.prototype.sort()的排序稳定性</a></li>
</ul>
</p>
<h1 id="扩展运算符">扩展运算符</h1>
<h2 id="含义">含义</h2>
<p>扩展运算符是三个点...，它如同rest参数的逆运算，将一个数组转为用逗号分隔的参数序列。rest参数相当于接收不定量的参数，形成数组，类似于arguments参数，而扩展运算符...相当于拆解数组。</p>
<pre><code class="language-javascript">console.log(...[1,2,3])//1 2 3
console.log(1,...[2,3,4],5)//1 2 3 4 5
[...document.querySelectorAll('div')]//[&lt;div&gt;,&lt;div&gt;,&lt;div&gt;]
</code></pre>
<h2 id="替代数组的apply方法">替代数组的apply方法</h2>
<p>由于扩展运算符可以展开数组，所以不需要使用apply方法将数组转为函数的参数</p>
<pre><code class="language-javascript">function f(x,y,z){
    //
}
var args=[0,1,2];
f.apply(null,args);//ES5
f(...args);//ES6
</code></pre>
<h2 id="扩展运算符的应用">扩展运算符的应用</h2>
<h3 id="合并数组">合并数组</h3>
<pre><code class="language-javascript">//ES5
[1,2].concat(more)
//ES6
[1,2,...more]
[...arr1,...arr2,...arr3]
</code></pre>
<h3 id="与结构赋值结合">与结构赋值结合</h3>
<p>扩展运算符可以与解构赋值结合起来，并用于生成数组</p>
<pre><code class="language-javascript">//ES5
a=list[0],rest=list.slice(1)
//ES6
[a,...rest]=list
const[first,...rest]=[1,2,3,4,5];
first//1
rest//[2,3,4,5]
const[first,...rest]=[]
first//unddefined
rest//[]
</code></pre>
<p>如果扩展运算符用于数组赋值，则只能将其放在参数的最后一位，否则会报错</p>
<h3 id="函数的返回值">函数的返回值</h3>
<p>JavaScript的函数只能返回一个值，如果需要传回多个值，只能返回数组或对象，拓展运算符提供了一种变通的方法，通过拓展运算符，将传来的数组或对象变为一个参数序列</p>
<h3 id="字符串">字符串</h3>
<p>扩展运算符可以将字符串转换为数组<code>[...'hello']//['h','e','l','l','o']</code><br>
扩展运算符这样写的好处在于能够正确识别32位的Unicode字符</p>
<pre><code class="language-javascript">'x\uD83D\uDE80y'.length//4
[...'x\uD83D\uDE80y'].length//3
</code></pre>
<p>凡是涉及32位Unicode字符的函数都有这个问题，因此最好用扩展运算符改写</p>
<h3 id="实现iterator接口的对象">实现Iterator接口的对象</h3>
<p>任何Iterator接口的对象都可以用扩展运算符转换为真正的数组</p>
<pre><code class="language-javascript">var nodeList=document.querySelectorAll('div');
var array=[...nodeList];
</code></pre>
<p>上面的代码中，querySelectorAll方法返回的是一个nodeList对象，扩展运算符能将其转换为数组，原因在于nodeList对象实现了Iterator<br>
对于没有部署Iterator接口的类似数组的对象，扩展运算符无法将其转为真正的数组</p>
<h3 id="map和set结构-generator函数">Map和Set结构、Generator函数</h3>
<p>扩展运算符内部调用的是数据结构的Iterator接口，因此只要具有Iterator接口的对象，都可以使用扩展运算符。<br>
Map结构</p>
<pre><code class="language-javascript">let map=new Map([
    [1,'one'],[2,'two'],[3,'three'],
])
</code></pre>
<p>Generator函数运行后会返回一个遍历器对象</p>
<pre><code class="language-javascript">var go=function*(){
    yield 1;
    yield 2;
    yield 3;
}
[...go()]//[1,2,3]
</code></pre>
<h1 id="arrayfrom">Array.from()</h1>
<p>用于将两类对象转为真正的数组：类似数组的对象和可便利的对象<br>
只要是部署了Iterator接口的数据结构，Array.from都能将其转为数组<br>
如果参数是一个真正的数组，Array.form会返回一个一摸一样的新数组<br>
扩展运算符...也可以将某些数据结构转为数组</p>
<pre><code class="language-javascript">function(){
    var args=[...arguments];
}
</code></pre>
<p>Array.form支持转换类似数组的对象，也就是必须有属性length，有属性length就可以转换为数组，这种情况就不能通过扩展运算符转换<br>
Array.form可以接受第二个参数，类似于数组的map方法，用来同时对每个元素进行处理，处理后放入返回的数组<br>
可以传入第三个参数，用来绑定this<br>
Array.form的另一个应用就是将字符串转换为数组，因为它能正确处理各种Unicode字符</p>
<pre><code class="language-javascript">function(string){
    return Array.from(string).length;
}
</code></pre>
<h1 id="arrayof">Array.of()</h1>
<p>用于将一组值转换为数组<code>Array.of(3,11,8)//[3,11,8]</code><br>
主要目的是弥补数组构造函数Array()的不足，因为参数个数的不同会导致Array()的行为有差异</p>
<pre><code class="language-javascript">Array()//[]
Array(3)//[,,,]
Array(3,11,8)//[3,11,8]
</code></pre>
<p>Array.of基本可以用来代替Array()或new Array()，并且不存在由于参数不同而导致的重载<br>
Array.of总是返回参数值组成的数组。如果没有参数，返回一个空数组</p>
<h1 id="数组实例的copywithin">数组实例的copyWithin()</h1>
<p>数组实例的copyWithin方法会在当前数组内部将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组，使用这个数组会改变当前数组<br>
<code>Array.prototype.copyWithin(target,start=0,end=this.length)</code><br>
接受三个参数</p>
<ul>
<li>target（必选）：从该位置开始替换数据</li>
<li>start（可选）：从该位置开始读取数据，默认为0，如果为负值，表示倒数</li>
<li>end（可选）：到该值前停止读取数据，默认等于数组长度。如果为负值，表示倒数</li>
</ul>
<p>如果参数为非数值，则会转换为数值</p>
<pre><code class="language-javascript">[1,2,3,4,5].copyWithin(0,-2,-1)
//[4,2,3,4,5]
[].copyWithin.call({length:5,3:1},0,3)
//{0:1,3:1,length:5}
</code></pre>
<h1 id="数组实例的find和findindex">数组实例的find()和findIndex()</h1>
<p>数组实例的find方法用于找出第一个符合条件的数组成员。他的参数是一个回调函数，所有数组成员依次执行该回调函数，知道找出第一个返回值为true的成员，然后返回该成员，如果没有符合条件的成员，则返回undefined<br>
数组实例的findIndex方法的用法与find方法类似，返回第一个符合条件的数组的成员的位置，如果所有成员都不符合条件，则返回-1<br>
这两个方法都可以接受第二个参数，用来绑定回调函数的this对象（个人猜测应该是用于箭头函数中的，因为箭头函数没有this指针，所以需要额外传一个进来），都可以发现<strong>NaN</strong>，弥补了数组的IndexOf方法的不足</p>
<h1 id="数组实力的fill">数组实力的fill()</h1>
<p>fill方法使用给定值填充一个数组<br>
fill方法也可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置</p>
<pre><code class="language-javascript">['a','b','c'].fill(7,1,2)
//['a',7,'c']
</code></pre>
<h1 id="数组实例的entries-keys和values">数组实例的entries()、keys()和values()</h1>
<p>用于遍历数组，都返回一个遍历器对象，可用for...of循环遍历，区别在于keys()是对键名的遍历，values()是对键值的遍历，entries()是对键值对的遍历</p>
<pre><code class="language-javascript">for(let index of ['a','b'].keys()){
    console.log(index);
}
//0
//1
for(let elem of['a','b'].values()){
    console.log(elem);
}
//'a'
//'b'
for(let[index,elem]of['a','b'].entries()){
    console.log(index,elem);
}
//0&quot;a&quot;
//1&quot;b&quot;
</code></pre>
<p>如果不使用for...of循环，可以手动调用遍历器对象的next方法进行遍历</p>
<pre><code class="language-javascript">let letter=['a','b','c'];
let entries=letter.entries();
console.log(entries.next().value);//[0,'a']
console.log(entries.next().value);//[1,'b']
console.log(entries.next().value);//[2,'c']
</code></pre>
<h1 id="数组实例的includes">数组实例的includes()</h1>
<p>返回一个布尔值，表示某个数组是否包含给定的值，与字符串的<code>includes</code>方法类似</p>
<pre><code class="language-javascript">[1,2,3].includes(2)//true
[1,2,3].includes(4)//false
[1,2,NaN].includes(NaN)//true
</code></pre>
<p>该方法的第二个参数表示搜索的起始位置，默认为0，如果第二个参数为负数，则表示倒数的位置，如果大于数组的长度，则重置为0<br>
在<code>includes</code>之前，我们通常使用数组的<code>indexOf</code>方法。<code>indexOf</code>有两个缺点，一个是不够语义化，该方法是找到参数出现的第一个位置，比较是否不等于-1，表达起来不够直观，二是由于内部使用了===，所以会对NaN造成误判<code>[NaN].indexOf(NaN)//-1</code><br>
Map和Set数据结构有一个has方法，Map的has方法是用来查找键名的，Set的has方法是用来查找值的</p>
<h1 id="数组实例的flastflatmap">数组实例的flast()，flatMap()</h1>
<p>数组的成员有时还是数组（二维数组等），<code>Array.prototype.flat()</code>用于将嵌套的数组拉平，变成一个一维的数组，该方法返回一个新数组，对原数据没有影响<code>[1,2,[3,4]].flat()//[1,2,3,4]</code><br>
<code>flat()</code>默认只会拉平一层，如果想要拉平多层，可以设置一个参数，表示想拉平的层数，默认为1</p>
<pre><code class="language-javascript">[1,2,[3,[4,5]]].flat()//[1,2,3,[4,5]]
[1,2,[3,[4,5]]].flat(2)//[1,2,3,4,5]
</code></pre>
<p>如果不管有多少层嵌套，都要转成一维数组，可以用<code>Infinity</code>关键字作为参数<br>
<code>[1,[2,[3]]].flat(Infinity)//[1,2,3]</code><br>
如果原数组有空位，<code>flat()</code>方法会跳过空位。<code>[1,2,,4,5].flat()//[1,2,4,5]</code><br>
<code>flatMap()</code>方法对原数组的每个成员执行一个函数，相当于map()，然后对返回值组成的数组执行<code>flat()</code>方法，该方法返回一个新数组，不改变原数组</p>
<pre><code class="language-javascript">//相当于[[2,4,],[3,6],[4,8]].flat()
[2,3,4].flatMap((x)=&gt;[x,x*2])
//[2,4,3,6,4,8]
</code></pre>
<p><code>flatMap()</code>只能展开一层数组<br>
<code>flatMap()</code>的参数是一个遍历函数，该函数可以接受三个参数，分别是当前数组成员、当前数组成员的位置（从0开始）、原数组<br>
还可以接受第二个参数，用来绑定遍历函数里面的this</p>
<h1 id="数组的空位">数组的空位</h1>
<p>数组的空位指数组上没有任何值，比如，Array构造函数返回的数组都是空位<code>Array(3)//[,,,]</code><br>
空位不是<code>undefined</code>，一个位置的值等于<code>undefined</code>，依然是有值的，空位是没有让你和值，<code>in</code>运算符可以说明这一点</p>
<pre><code class="language-javascript">0 in [undefined,undefined,undefined]//true
0 in [,,,]//false
</code></pre>
<p><em>ES5</em>的处理是不一致的，大部分情况会忽略空位</p>
<ul>
<li><code>forEach()</code>,<code>filter()</code>,<code>reduce()</code>, <code>every()</code> 和<code>some()</code>都会跳过空位</li>
<li><code>map()</code>会跳过空位，但会保留这个值</li>
<li><code>join()</code>和<code>toString()</code>会将空位视为<code>undefined</code>，而<code>undefined</code>和<code>null</code>会被处理成空字符串</li>
</ul>
<p><em>ES6</em>则是明确将空位转换为<code>undefined</code><br>
数组有空位，for...of并不会忽略，如果改成map方法遍历，空位是会跳过的</p>
<h1 id="arrayprototypesort的排序稳定性">Array.prototype.sort()的排序稳定性</h1>
<p>排序稳定性是排序算法的重要属性，指的是排序关键字相同的项目，排序前后的顺序不变</p>
<pre><code class="language-javascript">const arr = [
  'peach',
  'straw',
  'apple',
  'spork'
];

const stableSorting = (s1, s2) =&gt; {
  if (s1[0] &lt; s2[0]) return -1;
  return 1;
};

arr.sort(stableSorting)
// [&quot;apple&quot;, &quot;peach&quot;, &quot;straw&quot;, &quot;spork&quot;]
</code></pre>
<p>上面代码对数组arr按照首字母进行排序。排序结果中，straw在spork的前面，跟原始顺序一致，所以排序算法stableSorting是稳定排序。</p>
<pre><code class="language-javascript">const unstableSorting = (s1, s2) =&gt; {
  if (s1[0] &lt;= s2[0]) return -1;
  return 1;
};

arr.sort(unstableSorting)
// [&quot;apple&quot;, &quot;peach&quot;, &quot;spork&quot;, &quot;straw&quot;]
</code></pre>
<p>上面代码中，排序结果是spork在straw前面，跟原始顺序相反，所以排序算法unstableSorting是不稳定的。<br>
常见的排序算法之中，插入排序、合并排序、冒泡排序等都是稳定的，堆排序、快速排序等是不稳定的。不稳定排序的主要缺点是，多重排序时可能会产生问题。假设有一个姓和名的列表，要求按照“姓氏为主要关键字，名字为次要关键字”进行排序。开发者可能会先按名字排序，再按姓氏进行排序。如果排序算法是稳定的，这样就可以达到“先姓氏，后名字”的排序效果。如果是不稳定的，就不行<br>
之前的排序算法是否稳定是交给浏览器自己决定的，现在在<em>ES2019</em>中明确规定<code>Array.prototype.sort()</code>的默认排序算法必须稳定</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数值的扩展]]></title>
        <id>https://greyseid.github.io/post/shu-zhi-de-kuo-zhan/</id>
        <link href="https://greyseid.github.io/post/shu-zhi-de-kuo-zhan/">
        </link>
        <updated>2020-11-18T15:29:29.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%92%8C%E5%85%AB%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E6%B3%95">二进制和八进制表示法</a></li>
<li><a href="#numberisfinite-numberisnan">Number.isFinite()、Number.isNaN()</a></li>
<li><a href="#numberparseint-numberparsefloat">Number.parseInt()、Number.parseFloat()</a></li>
<li><a href="#numberisinteger">Number.isInteger()</a></li>
<li><a href="#numberepsilon">Number.EPSILON</a></li>
<li><a href="#%E5%AE%89%E5%85%A8%E6%95%B4%E6%95%B0%E5%92%8Cnumberissafeinteger">安全整数和Number.isSafeInteger()</a></li>
<li><a href="#math%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%8B%93%E5%B1%95">Math对象的拓展</a>
<ul>
<li><a href="#mathtrunc">Math.trunc()</a></li>
<li><a href="#mathsign">Math.sign()</a></li>
<li><a href="#mathcbrt">Math.cbrt()</a></li>
<li><a href="#mathclz32">MAth.clz32()</a></li>
<li><a href="#mathimul">Math.imul()</a></li>
<li><a href="#mathfround">Math.fround()</a></li>
<li><a href="#mathhypot">Math.hypot()</a></li>
<li><a href="#%E5%AF%B9%E6%95%B0%E6%96%B9%E6%B3%95">对数方法</a>
<ul>
<li><a href="#mathexpm1">Math.expm1()</a></li>
<li><a href="#mathlog1p">Math.log1p()</a></li>
<li><a href="#mathlog10">Math.log10()</a></li>
<li><a href="#mathlog2">Math.log2()</a></li>
</ul>
</li>
<li><a href="#%E5%8F%8C%E6%9B%B2%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95">双曲函数方法</a></li>
</ul>
</li>
<li><a href="#mathsignbit%E6%8F%90%E6%A1%88">Math.signbit()——提案</a></li>
<li><a href="#%E6%8C%87%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6">指数运算符</a></li>
<li><a href="#integer%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%8F%90%E6%A1%88">Integer数据类型——提案</a>
<ul>
<li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li>
<li><a href="#%E8%BF%90%E7%AE%97">运算</a></li>
</ul>
</li>
</ul>
</p>
<h1 id="二进制和八进制表示法">二进制和八进制表示法</h1>
<p><em>ES6</em>提供了二进制和八进制的新写法，分别用前缀0b或0B（binary）和0o或0O（octonary）表示。八进制可以使用前缀0表示<code>0O11===011</code>，但是在严格模式中是不允许的，而在<em>ES6</em>中，进一步明确表示要用0O来表示。<br>
如果要将使用0b和0x前缀的字符串数值转为十进制数值，要使用Number方法</p>
<pre><code class="language-javascript">Number('0b111') //7
Number('0o10')  //8
</code></pre>
<h1 id="numberisfinite-numberisnan">Number.isFinite()、Number.isNaN()</h1>
<p><em>ES6</em>在Number对象上提供了Number.isFinite()和Number.isNaN()两个方法。一个用来判断是否有限，一个用来判断是否为NaN(not a number)。</p>
<pre><code class="language-javascript">Number.isFinite(15);        //true
Number.isFinite(0.8);       //true
Number.isFinite(NaN);       //false
Number.isFinite(Infinity);  //false
Number.isFinite(-Infinity); //false
Number.isFinite('foo');     //false
Number.isFinite('15');      //false
Number.isFinite(true);      //false
</code></pre>
<p>新的方法与全局方法<code>isFinite()</code>和<code>isNaN()</code>的不同之处在于，新的方法是不会将传递过来的参数进行转换的，也就是说是不会对非数值进行转换，所以<code>Number.isFinite()</code>对于非数值，会直接返回false，<code>Number.isNaN</code>之对于NaN返回true，其余一律返回false</p>
<h1 id="numberparseint-numberparsefloat">Number.parseInt()、Number.parseFloat()</h1>
<p><em>ES6</em>将<code>parseInt()</code>和<code>parseFloat()</code>移植到了Number对象上，行为完全保持不变</p>
<pre><code class="language-javascript">Number.parseInt('12.34')        //12
Number.parseFloat('123.45#')    //123.45

Number.parseInt===parseInt      //true
Number.parseFloat===parseFloat  //true
</code></pre>
<p>这样做的目的是逐步减少全局性方法，使得语言逐步模块化</p>
<h1 id="numberisinteger">Number.isInteger()</h1>
<p><code>Number.isInteger()</code>用来判断一个值是否为证书。在javascript中，由于整数与浮点数是用同一种方式进行储存，所以3和3.0被视为同一个值</p>
<pre><code class="language-javascript">Number.isInteger(25)    //true
Number.isInteger(25.0)  //true
Number.isInteger(25.1)  //false
Number.isInteger(&quot;15&quot;)  //false
Number.isInteger(true)  //false
</code></pre>
<p><code>Number.isInteger()</code>不会将非数值转换为数值再进行判断</p>
<h1 id="numberepsilon">Number.EPSILON</h1>
<p><em>ES6</em>再Number对象上新增了一个极小的常量——<code>Number.EPSILON //2.220446049250313e-6</code><br>
引入一个这么小的量目的在于为浮点数的计算设置一个误差范围<br>
由于浮点数的计算是不精确的，例如<code>0.1+0.2 //0.30000000000000004</code>，所以如果计算的误差能够小于<code>Number.EPSILON</code>，那么就可以认为得到了正确的结果</p>
<h1 id="安全整数和numberissafeinteger">安全整数和Number.isSafeInteger()</h1>
<p>JavaScript能够准确表示的整数范围在-2<sup>53</sup>到2<sup>53</sup>之间（开区间），这是由于在js中，整数和浮点数是用同样的方法储存的，所以一共有64位储存，但是第1到11位是用来储存指数部分的，整数并不需要指数部分，所以只剩下53位来进行使用</p>
<pre><code class="language-javascript">Math.pow(2,53)  //2^53
Math.pow(2,53)===Math.pow(2,53)+1   //true
</code></pre>
<p>超出2的53次方后，一个数就不精确了<br>
<em>ES6</em>引入了<code>Number.MAX_SAFE_INTEGER //Math.pow(2,53)-1</code>和<code>Number.MIN_SAFE_INTEGER //-(Math.pow(2,53)-1)</code>两个常量来表示整数范围的上下限</p>
<p>使用<code>Number.isSafeInteger()</code>来判断一个整数是否落在这个范围之内时，除了要注意验证计算结果是否在安全整数的范围之内，还要注意参与运算的数是否在范围内</p>
<pre><code class="language-javascript">Number.isSafeInteger(9007199254740993)
//false
Number.isSafeInteger(990)
//true
Number.isSafeInteger(9007199254740993-990)
//true
9007199254740993-990
//返回正确结果：9007199254740002
//正确答案应该是：9007199254740003
</code></pre>
<p>之所以有这个结果是因为参与运算的数<strong>9007199254740993</strong>超出了精度范围，所以计算机内部储存为<strong>9007199254740992</strong>来进行运算，也就是2<sup>53</sup>，而精度范围是不包含这个的，所以不在安全范围内。所以，如果只验证运算结果是否为安全整数，则可能得到错误的结果</p>
<h1 id="math对象的拓展">Math对象的拓展</h1>
<p><em>ES6</em>在Math对象上新增了17个与数学相关的方法。所有这些方法都是静态方法，只能在Math对象上调用<br>
大部分方法对于非数值，先转换为数值再进行计算，转换不了则返回NaN或false</p>
<h2 id="mathtrunc">Math.trunc()</h2>
<p>去除一个数的小数部分，返回整数部分<br>
对于非数值，<code>Math.trunc</code>内部使用Number方法转换为数值<code>Math.trunc('123.456')//123</code><br>
对于空值和无法截取整数的值，返回NaN</p>
<pre><code class="language-javascript">Math.trunc(NaN);    //NaN
Math.trunc('foo');  //NaN
Math.trunc();       //NaN
</code></pre>
<h2 id="mathsign">Math.sign()</h2>
<p>判断一个数到底是正数、负数还是零。对于非数值，会先转换为数值<br>
返回值有5种情况</p>
<ul>
<li>参数为正数，返回+1</li>
<li>参数为负数，返回-1</li>
<li>参数为0，返回0</li>
<li>参数为-0，返回-0</li>
<li>其他值，返回NaN</li>
</ul>
<pre><code class="language-javascript">Math.sign(-5)//-1
Math.sign(5)//+1
Math.sign(0)//+0
Math.sign(-0)//-0
Math.sign(NaN)//NaN
Math.sign('9')//+1
Math.sign('foo')//NaN
Math.sign()//NaN
</code></pre>
<h2 id="mathcbrt">Math.cbrt()</h2>
<p>用于计算一个数的立方根<br>
对于非数值，<code>Math.cbrt</code>方法先使用Number方法转换为数值</p>
<pre><code class="language-javascript">Math.cbrt('8')      //2
Math.cbrt('hello')  //NaN
</code></pre>
<h2 id="mathclz32">MAth.clz32()</h2>
<p>JavaScript的整数使用32位二进制形式表示，Math.clz32()返回一个数的32位无符号整数形式有多少个前导0</p>
<pre><code class="language-javascript">Math.clz32(0)//32
Math.clz32(1)//31
MAth.clz32(0b01000000000000000000000000000000)//1
</code></pre>
<p>clz32：“count leading zero bits in 32-bit binary representations of a number”计算32位整数的前导0的缩写<br>
左移计算符&lt;&lt;与Math.clz32直接相关<br>
对于小数，Math.clz32只考虑整数部分<br>
对于空值或其他类型的值，Math.clz32会先将他们转换为数值，然后再计算</p>
<pre><code class="language-javascript">Math.clz32()//32
Math.clz32(NaN)//32
MAth.clz32(Infinity)//32
Math.clz32(null)//32
Math.clz32('foo')//32
Math.clz32([])//32
Math.clz32({})//32
MAth.clz32(true)//32
</code></pre>
<h2 id="mathimul">Math.imul()</h2>
<p>返回两个数以32位带符号位整数形式相乘的结果，返回一个32位带符号整数</p>
<pre><code class="language-javascript">Math.imul(2,4)//4
MAth.imul(-1,8)//-8
Math.imul(-2,-2)//4
</code></pre>
<p>超过32位算溢出<br>
使用这个方法是因为JS有精度限制，超过2<sup>53</sup>的无法精确表示，对于那些很大的数的乘法，低位数值往往都是不精确的，Math.imul方法可以返回正确的低位数值</p>
<h2 id="mathfround">Math.fround()</h2>
<p>返回一个数的单精度浮点数形式<code>Math.fround(1.337)//1.3370000123977661</code><br>
对于整数来说，返回的结果不会不同，区别主要在于那些无法用64个二进制位精确表示的小数，会返回最接近这个小数的单精度浮点数</p>
<h2 id="mathhypot">Math.hypot()</h2>
<p>返回所有参数的平方和的平方根<br>
如果参数不是数值，会将其转换为数值，如果有一个参数无法转换为数值，则返回NaN</p>
<pre><code class="language-javascript">Math.hypot(3,4)//5
Math.hypot(NaN)//NaN
Math.hypot(3,4,'5')//7.0710678118654755
Math.hypot(3,4,'foo')//NaN
</code></pre>
<h2 id="对数方法">对数方法</h2>
<p><em>ES6</em>新增了4个对数相关方法</p>
<h3 id="mathexpm1">Math.expm1()</h3>
<p>Math.expm1(x)返回e<sup>x</sup>-1，即Math.exp(x)-1</p>
<pre><code class="language-javascript">Math.expm1(-1)//0.6321205588285577
Math.expm1(0)//0
Math.expm1(1)//1.718281828459045
</code></pre>
<h3 id="mathlog1p">Math.log1p()</h3>
<p>返回ln(1+x)，即Math.log(1+x)，如果x小于-1，返回NaN</p>
<pre><code class="language-javascript">Math.log1p(1)//0.6931471805599453
Math.log1p(0)//0
Math.log1p(-1)//-Infinity
Math.log1p(-2)//NaN
</code></pre>
<h3 id="mathlog10">Math.log10()</h3>
<p>返回以10为底的x的对数，即log<sub>10</sub>x，如果x小于0，则返回NaN</p>
<pre><code class="language-javascript">Math.log10(2)//0.3010299956639812
Math.log10(1)//0
Math.log(0)//-Infinity
Math.log10(-2)//NaN
Math.log10(100000)//5
</code></pre>
<h3 id="mathlog2">Math.log2()</h3>
<p>返回以2为底的x的对数，即log<sub>2</sub>x，如果x小于0，返回NaN</p>
<pre><code class="language-javascript">Math.log2(3)//1.58462500721156
Math.log2(2)//1
Math.log2(1)//0
Math.log2(0)//-Infinity
Math.log2(-2)//NaN
Math.log2(1024)//10
Math.log2(1&lt;&lt;29)//29
</code></pre>
<h2 id="双曲函数方法">双曲函数方法</h2>
<p><em>ES6</em>新增6个双曲函数方法</p>
<ul>
<li><code>Math.sinh(x)</code> 返回x的双曲正弦</li>
<li><code>Math.cosh(x)</code> 返回x的双曲余弦</li>
<li><code>Math.tanh(x)</code> 返回x的双曲正切</li>
<li><code>Math.asinh(x)</code> 返回x的反双曲正弦</li>
<li><code>Math.acosh(x)</code> 返回x的反双曲余弦</li>
<li><code>Math.atanh(x)</code> 返回x的反双曲正切</li>
</ul>
<h1 id="mathsignbit提案">Math.signbit()——提案</h1>
<p>判断一个数的符号位是否已经设置，这个方法是因为在<code>Math.sign()</code>用来判断正负的时候，-0的结果返回的是-0，但一般来说-0和+0是相等的<code>-0===+0//true</code>，所以不好判断是正是负</p>
<pre><code class="language-javascript">Math.signbit(2)//false
Math.signbit(-2)//true
Math.signbit(0)//false
Math.signbit(-0)//true
</code></pre>
<p>该方法算法如下</p>
<ul>
<li>如果参数是NaN，返回false</li>
<li>如果参数是-0，返回true</li>
<li>如果参数是负值，返回true</li>
<li>其他情况返回false</li>
</ul>
<h1 id="指数运算符">指数运算符</h1>
<p>新增了一个指数运算符(**)</p>
<pre><code class="language-javascript">2**2//4
2**3//8
a**=2//a=a*a
b**=3//b=b*b*b
</code></pre>
<p>在v8引擎中，指数运算符与Math.pow的实现不相同，对于特别大的结果，两者会有细微的差异</p>
<h1 id="integer数据类型提案">Integer数据类型——提案</h1>
<h2 id="简介">简介</h2>
<p>JavaScript所有数字都储存为64位浮点数，使得整数的精确程度只能到53个二进制位，使得JavaScript不适合进行科学和金融方面的精确计算<br>
引入新的数据类型Integer，只用来表示整数，没有位数限制<br>
为了与Number类型区别，Integer类型的数据必须使用后缀n来表示<code>1n+2n//3n</code><br>
JavaScript提供Integer对象，用来生成Integer类型的数值</p>
<pre><code class="language-javascript">Integer(123)//123n
Integer('123')//123n
Integer(false)//0n
Integer(true)//1n
</code></pre>
<p>以下用法会报错</p>
<pre><code class="language-javascript">new Integer()
Integer(undefined)
Integer(null)
Integer('123n')
Integer('abc')
//非数值不会转换为数值
</code></pre>
<h2 id="运算">运算</h2>
<p>Integer类型的+、-、*和**这四个二元运算符与Number类型的行为一致。除法运算/会舍去小数部分，返回一个整数<code>9n/5n //1n</code><br>
几乎所有的Number运算符都可以用在Integer中，但是有两个除外：不带符号的右移运算符&gt;&gt;&gt;和一元的求正运算符+，使用时会报错。&gt;&gt;&gt;要求最高位补0，但是Integer类型没有最高位，这个运算符毫无意义。一元运算符+在asm.js里面总是返回Number类型或报错<br>
Integer类型与Number类型进行混合运算会报错，因为无论返回Integer类型还是Number类型都会丢失信息<code>(2n**53n+1n)+0.5)</code>，返回Integer会丢失0.5这个小数，返回Number会超过53位的精确范围<br>
运算符==会改变数据类型，所以不允许混合使用，===不会改变数据类型，所以可以混合使用</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[正则的拓展]]></title>
        <id>https://greyseid.github.io/post/zheng-ze-de-tuo-zhan/</id>
        <link href="https://greyseid.github.io/post/zheng-ze-de-tuo-zhan/">
        </link>
        <updated>2020-11-16T07:22:32.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#regexp%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">RegExp构造函数</a></li>
<li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%AD%A3%E5%88%99%E6%96%B9%E6%B3%95">字符串的正则方法</a></li>
<li><a href="#u%E4%BF%AE%E9%A5%B0%E7%AC%A6">u修饰符</a>
<ul>
<li><a href="#%E7%82%B9%E5%AD%97%E7%AC%A6">点字符</a></li>
<li><a href="#unicode%E5%AD%97%E7%AC%A6%E8%A1%A8%E7%A4%BA%E6%B3%95">Unicode字符表示法</a></li>
<li><a href="#%E9%87%8F%E8%AF%8D">量词</a></li>
<li><a href="#%E9%A2%84%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%BC%8F">预定义模式</a></li>
<li><a href="#i%E4%BF%AE%E9%A5%B0%E7%AC%A6">i修饰符</a></li>
</ul>
</li>
<li><a href="#y%E4%BF%AE%E9%A5%B0%E7%AC%A6">y修饰符</a>
<ul>
<li><a href="#sticky%E5%B1%9E%E6%80%A7">sticky属性</a></li>
</ul>
</li>
<li><a href="#flags%E5%B1%9E%E6%80%A7">flags属性</a></li>
<li><a href="#s%E4%BF%AE%E9%A5%B0%E7%AC%A6dotall%E6%A8%A1%E5%BC%8F%E6%8F%90%E6%A1%88">s修饰符：dotAll模式（提案）</a></li>
<li><a href="#%E5%90%8E%E8%A1%8C%E6%96%AD%E8%A8%80%E6%8F%90%E6%A1%88-v8%E5%BC%95%E6%93%8E49%E7%89%88%E6%9C%AC%E5%B7%B2%E6%94%AF%E6%8C%81">后行断言（提案） ——V8引擎4.9版本已支持</a></li>
<li><a href="#unicode%E5%B1%9E%E6%80%A7%E7%B1%BB%E6%8F%90%E6%A1%88">Unicode属性类（提案）</a></li>
<li><a href="#%E5%85%B7%E5%90%8D%E7%BB%84%E5%8C%B9%E9%85%8D%E6%8F%90%E6%A1%88">具名组匹配（提案）</a>
<ul>
<li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li>
<li><a href="#%E7%BB%93%E6%9E%84%E8%B5%8B%E5%80%BC%E4%B8%8E%E6%9B%BF%E6%8D%A2">结构赋值与替换</a></li>
<li><a href="#%E5%BC%95%E7%94%A8">引用</a></li>
</ul>
</li>
</ul>
</p>
<h1 id="regexp构造函数">RegExp构造函数</h1>
<p>在<em>ES5</em>中，使用<strong>RegExp构造函数</strong>时</p>
<pre><code class="language-javascript">var regex=new RegExp('xyz','i');
//或
var regex=new RegExp(/xyz/i);
//等价于
var regex=/xyz/i;
</code></pre>
<p>但是在使用<strong>RegExp构造函数</strong>时，第一个参数为正则表达式，则第二个参数不能添加修饰符</p>
<pre><code class="language-javascript">var regex=new RegExp(/xyz/,'i');
//错误error
</code></pre>
<p>但是在<em>ES6</em>中则发生了变化，它允许使用这种方式混用的方式，并且在使用的时候，如果第一个参数的正则表达式中有修饰符的话，那么第二个参数的修饰符就会覆盖过去，原来的修饰符会被忽略，只会使用新的修饰符</p>
<pre><code class="language-javascript">new RegExp(/xyz/ig,'i').flags;
//&quot;i&quot;
</code></pre>
<h1 id="字符串的正则方法">字符串的正则方法</h1>
<p>字符串对象<code>new String()</code>有四种方法使用正则表达式：<code>match()</code>、<code>replace()</code>、<code>search()</code>、<code>split()</code><br>
<em>ES6</em>使四个方法在内部全部调用<strong>RegExp</strong>的实例方法</p>
<h1 id="u修饰符">u修饰符</h1>
<p><em>ES6</em>新增了u修饰符用于正确处理大于\uFFFF的Unicode字符，也就是可以处理4个字节的UTF-16编码</p>
<h2 id="点字符">点字符</h2>
<p>点(.)字符在正则表达式中的含义是除换行符以外的任意单个字符，而大于\uFFFF的Unicode字符，点字符不能识别</p>
<h2 id="unicode字符表示法">Unicode字符表示法</h2>
<p><em>ES6</em>新增了用大括号{}表示Unicode字符的方法，但是在正则表达式中，必须要加上u修饰符才能识别当中的大括号，否则会被解读为量词</p>
<pre><code class="language-javascript">/\u{61}/.test('a')                          //false
/\u{61}/u.test('a')                         //true
/\u{20BB7}/u.test('𠮷')                     //true
</code></pre>
<h2 id="量词">量词</h2>
<p>使用u修饰符后，所有两次都会正确识别码点大于0xFFFF的Unicode字符</p>
<pre><code class="language-javascript">/a{a}/.test('aa')               //true
/a{2}/u.test('aa')              //true
/𠮷{2}/.test('𠮷𠮷')            //false
/𠮷{2}/u.test('𠮷𠮷')           //true
</code></pre>
<h2 id="预定义模式">预定义模式</h2>
<p>u修饰符页影响到预定义模式能否正确识别码点大于0xFFFF的Unicode字符</p>
<h2 id="i修饰符">i修饰符</h2>
<p>有些Unicode字符的编码不同，但是字型相近，比如，\u004B和\u212A都是大写的K</p>
<pre><code class="language-javascript">/[a-z]/i.test('\u212A')             //false
/[a-z]/iu.test('\u212A')            //true
</code></pre>
<p>不加修饰符无法识别非规范的K字符</p>
<h1 id="y修饰符">y修饰符</h1>
<p><em>ES6</em>添加了y修饰符（粘连<em>sticky</em>修饰符）<br>
y修饰符与g修饰符类似，也是全局匹配，后一次匹配都从上一次匹配成功的下一个位置开始。不同之处在于，g修饰符只要剩余位置中存在匹配就行，而y修饰符会确保匹配必须从剩余的第一个位置开始</p>
<pre><code class="language-javascript">var s=&quot;aaa_aa_a&quot;;
var r1=/a+/g;
var r2=/a+/y;
r1.exec(s)          //[&quot;aaa&quot;]
r2.exec(s)          //[&quot;aaa&quot;]
r1.exec(s)          //[&quot;aa&quot;]
r2.exec(s)          //null
</code></pre>
<p>aaa之后，剩余字符串为&quot;<em>aa_a&quot;，由于第一个位置为&quot;</em>&quot;,所以y修饰符是不会匹配到的，返回null结果</p>
<h2 id="sticky属性">sticky属性</h2>
<p>为了配合y修饰符的使用，添加了sticky属性，表示是否设置了y修饰符</p>
<pre><code class="language-javascript">var r=/hello\d/y;
r.sticky            //true
</code></pre>
<h1 id="flags属性">flags属性</h1>
<p><em>ES6</em>新增了一个flags属性来返回正则表达式的修饰符</p>
<pre><code class="language-javascript">/abc/ig.flags
//'gi'
</code></pre>
<h1 id="s修饰符dotall模式提案">s修饰符：dotAll模式（提案）</h1>
<p>点(.)是一个特殊字符，代表任意的单个字符，但是<strong>行终止符</strong>除外</p>
<ul>
<li>U+000A 换行符(<strong>\n</strong>)</li>
<li>U+000D 回车符(<strong>\r</strong>)</li>
<li>U+2028 行分隔符</li>
<li>U+2029 段分隔符</li>
</ul>
<p><code>/foo.bar/.test('foo\nbar) //false</code>因为(.)不匹配\n，所以正则表达式返回false<br>
可以使用<code>/foo[^]bar/.test('foo\nbar') //true</code><br>
或者引入s修饰符也就是<strong>dotAll模式</strong>，可以匹配任意单个字符</p>
<h1 id="后行断言提案-v8引擎49版本已支持">后行断言（提案） ——V8引擎4.9版本已支持</h1>
<p><em>JavaScript</em>语言的正则表达式只支持先行断言和先行否定断言，不支持后行断言和后行否定断言<br>
<em>先行断言</em>指的是，x只有在y的前面才匹配，例如<code>/x(?=y)/</code>的形式，只匹配百分号之前的数字：<code>/\d+(?=%)/</code>。<em>先行否定断言</em>指的是x只有不在y的后面才匹配，写成<code>/x(?!y)/</code>的形式，只匹配不在百分号前的数字，写成<code>/\d+(?!%)/</code></p>
<pre><code class="language-javascript">/\d+(?=%)/.exec('100% of US presidents have been male')         //[&quot;100&quot;]
/\d+(?!%)/.exec('that’s all 44 of them')                        //[&quot;44&quot;]
</code></pre>
<p><em>后行断言</em>与先行断言相反，x只有在y后面才能匹配，必须写成<code>/(?&lt;=y)x/</code>的形式，只匹配美元符号之后的数字，要写成<code>/(?&lt;=\$)\d+/</code>的形式，<em>后行否定断言</em>也是与先行否定断言相反，只有x不在y后面才匹配，写成<code>/(?&lt;!y)x/</code>的形式，只匹配不在美元符号后面的数字，写成<code>(?&lt;!\$)\d+/</code></p>
<pre><code class="language-javascript">/(?&lt;=\$)\d+/.exec('Benjamin Franklin is on the $100 bill')      //[&quot;100&quot;]
/(?&lt;!\$)\d+/.exec('it‘s is worth about €90')                    //[&quot;90&quot;]
</code></pre>
<p><em>后行断言</em>需要先匹配x，再回到左边匹配y的部分。这种<strong>先右后左</strong>的执行顺序与其他正则操作相反，导致了一些不符合预期的结果</p>
<pre><code class="language-javascript">/(?&lt;=(\d+)(\d+))$/.exec('1053')     //[&quot;&quot;,&quot;1&quot;,&quot;053&quot;]
/^(\d+)(\d+)$/.exec('1053')         //[&quot;1053,&quot;105&quot;,&quot;3&quot;]

/(?&lt;=(o)d\l)r/.exec('hodor')        //null
/(?&lt;=\ld(o))r/.exec('hodor')        //[&quot;r&quot;,&quot;o&quot;]
</code></pre>
<h1 id="unicode属性类提案">Unicode属性类（提案）</h1>
<p>使用<code>\P{...}</code>和<code>\p{...}</code>，允许正则表达式匹配符合Unicode某种属性的所有字符</p>
<pre><code class="language-javascript">const regexGreekSymbol=/\p{Script=Greek}/u;
regexGreeKSymbol.test('Π')      //true
</code></pre>
<h1 id="具名组匹配提案">具名组匹配（提案）</h1>
<h2 id="简介">简介</h2>
<p>正则表达式使用圆括号进行组匹配<code>const RE_DATE=/(\d{4})-(\d{2})-(\d{2})/;</code><br>
组匹配的一个问题是，每一组的匹配含义不容易看出来，只能用数字去引用，要是组的顺序变了，数字引用的时候必须修改序号<br>
具名组匹配的用法就是再模式的头部添加”问号+尖括号+组名“(?<year>)，然后就可以再exec方法返回结果的groups属性上引用该组名。</p>
<h2 id="结构赋值与替换">结构赋值与替换</h2>
<p>使用解构赋值直接从匹配结果上为变量赋值<br>
<code>let {groups:{one,two}}=/^(?&lt;one&gt;.*):(?&lt;two&gt;.*)$/u.exec('foo:bar');</code><br>
字符串替换时，使用$&lt;组名&gt;引用具名组</p>
<pre><code class="language-javascript">let re=/(?&lt;year&gt;\d{4})-(?&lt;month&gt;\d{2})-(?&lt;day&gt;\d{2})/u;
'2015-01-02'.replace(re,'$&lt;day&gt;/$&lt;month&gt;/$&lt;year&gt;')
//  '02/01/2015'
</code></pre>
<p><em>replace</em>方法的第二个参数是一个字符串，表示格式，而不是正则表达式，第一个才是。<em>replace</em>的第二个参数也可以是函数，接受源字符串、匹配项、开始位置等，返回一个新的字符串</p>
<pre><code class="language-javascript">'2015-01-02'.replace(re,(
    matched,    //整个匹配结果2015-01-02
    capturel1,  //第一个组匹配2015
    capturel2,  //第二个组匹配01
    capturel3,  //第三个组匹配02
    position,   //匹配开始的位置0
    S,          //源字符串2015-01-05
    groups      //具名组构成的一个对象{year,month,day}
)=&gt;{
    let {day,month,year}=args[args.length-1];
    return `${day}/${month}/${year}`;
});
</code></pre>
<p>具名组匹配在原来的基础上新增了最后一个函数参数：具名组构成的一个对象。函数内部可以直接对这个对象进行解构赋值</p>
<h2 id="引用">引用</h2>
<p>如果要在正则表达式内部引用某个“具名组匹配”，可以使用\k&lt;组名&gt;的写法，数字引用（\1）依然有效，而且可以混用</p>
<pre><code class="language-javascript">const RE_TWICE=/^(?&lt;word&gt;[a-z]+)!\k&lt;word&gt;!\1$;
RE_TWICE.test('abc!abc!abc')    //true
RE_TWICE.test('abc!abc!ab')     //false
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HELLO！！！]]></title>
        <id>https://greyseid.github.io/post/hello/</id>
        <link href="https://greyseid.github.io/post/hello/">
        </link>
        <updated>2020-11-16T02:57:34.000Z</updated>
        <content type="html"><![CDATA[<p><em><strong>HELLO WORLD!!!</strong></em></p>
<p><em>第一篇博客</em></p>
<p>希望以后能记录更多的内容</p>
]]></content>
    </entry>
</feed>