<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://greyseid.github.io/</id>
    <title>GREYSEID</title>
    <updated>2020-11-17T08:00:32.429Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://greyseid.github.io/"/>
    <link rel="self" href="https://greyseid.github.io/atom.xml"/>
    <subtitle>欢迎来到GREYSEID的自留地</subtitle>
    <logo>https://greyseid.github.io/images/avatar.png</logo>
    <icon>https://greyseid.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, GREYSEID</rights>
    <entry>
        <title type="html"><![CDATA[正则的拓展]]></title>
        <id>https://greyseid.github.io/post/zheng-ze-de-tuo-zhan/</id>
        <link href="https://greyseid.github.io/post/zheng-ze-de-tuo-zhan/">
        </link>
        <updated>2020-11-16T07:22:32.000Z</updated>
        <content type="html"><![CDATA[<p>#RegExp构造函数#<br>
在<em>ES5</em>中，使用<strong>RegExp构造函数</strong>时</p>
<pre><code class="language-javascript">var regex=new RegExp('xyz','i');
//或
var regex=new RegExp(/xyz/i);
//等价于
var regex=/xyz/i;
</code></pre>
<p>但是在使用<strong>RegExp构造函数</strong>时，第一个参数为正则表达式，则第二个参数不能添加修饰符</p>
<pre><code class="language-javascript">var regex=new RegExp(/xyz/,'i');
//错误error
</code></pre>
<p>但是在<em>ES6</em>中则发生了变化，它允许使用这种方式混用的方式，并且在使用的时候，如果第一个参数的正则表达式中有修饰符的话，那么第二个参数的修饰符就会覆盖过去，原来的修饰符会被忽略，只会使用新的修饰符</p>
<pre><code class="language-javascript">new RegExp(/xyz/ig,'i').flags;
//&quot;i&quot;
</code></pre>
<p>#字符串的正则方法#<br>
字符串对象<code>new String()</code>有四种方法使用正则表达式：<code>match()</code>、<code>replace()</code>、<code>search()</code>、<code>split()</code><br>
<em>ES6</em>使四个方法在内部全部调用<strong>RegExp</strong>的实例方法</p>
<p>#u修饰符#<br>
<em>ES6</em>新增了u修饰符用于正确处理大于\uFFFF的Unicode字符，也就是可以处理4个字节的UTF-16编码<br>
##点字符##<br>
点(.)字符在正则表达式中的含义是除换行符以外的任意单个字符，而大于\uFFFF的Unicode字符，点字符不能识别<br>
##Unicode字符表示法##<br>
<em>ES6</em>新增了用大括号{}表示Unicode字符的方法，但是在正则表达式中，必须要加上u修饰符才能识别当中的大括号，否则会被解读为量词</p>
<pre><code class="language-javascript">/\u{61}/.test('a')                          //false
/\u{61}/u.test('a')                         //true
/\u{20BB7}/u.test('𠮷')                     //true
</code></pre>
<p>##量词##<br>
使用u修饰符后，所有两次都会正确识别码点大于0xFFFF的Unicode字符</p>
<pre><code class="language-javascript">/a{a}/.test('aa')               //true
/a{2}/u.test('aa')              //true
/𠮷{2}/.test('𠮷𠮷')            //false
/𠮷{2}/u.test('𠮷𠮷')           //true
</code></pre>
<p>##预定义模式##<br>
u修饰符页影响到预定义模式能否正确识别码点大于0xFFFF的Unicode字符<br>
##i修饰符##<br>
有些Unicode字符的编码不同，但是字型相近，比如，\u004B和\u212A都是大写的K</p>
<pre><code class="language-javascript">/[a-z]/i.test('\u212A')             //false
/[a-z]/iu.test('\u212A')            //true
</code></pre>
<p>不加修饰符无法识别非规范的K字符</p>
<p>#y修饰符#</p>
<p><em>ES6</em>添加了y修饰符（粘连<em>sticky</em>修饰符）<br>
y修饰符与g修饰符类似，也是全局匹配，后一次匹配都从上一次匹配成功的下一个位置开始。不同之处在于，g修饰符只要剩余位置中存在匹配就行，而y修饰符会确保匹配必须从剩余的第一个位置开始</p>
<pre><code class="language-javascript">var s=&quot;aaa_aa_a&quot;;
var r1=/a+/g;
var r2=/a+/y;
r1.exec(s)          //[&quot;aaa&quot;]
r2.exec(s)          //[&quot;aaa&quot;]
r1.exec(s)          //[&quot;aa&quot;]
r2.exec(s)          //null
</code></pre>
<p>aaa之后，剩余字符串为&quot;<em>aa_a&quot;，由于第一个位置为&quot;</em>&quot;,所以y修饰符是不会匹配到的，返回null结果</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HELLO！！！]]></title>
        <id>https://greyseid.github.io/post/hello/</id>
        <link href="https://greyseid.github.io/post/hello/">
        </link>
        <updated>2020-11-16T02:57:34.000Z</updated>
        <content type="html"><![CDATA[<p><em><strong>HELLO WORLD!!!</strong></em></p>
<p><em>第一篇博客</em></p>
<p>希望以后能记录更多的内容</p>
]]></content>
    </entry>
</feed>